// Mocks generated by Mockito 5.4.5 from annotations
// in lockpaper/test/core/presentation/screens/lock_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:lockpaper/core/security/biometrics_service.dart' as _i2;
import 'package:lockpaper/core/security/encryption_key_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BiometricsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricsService extends _i1.Mock implements _i2.BiometricsService {
  MockBiometricsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get canAuthenticate =>
      (super.noSuchMethod(
            Invocation.getter(#canAuthenticate),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> authenticate(String? localizedReason) =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, [localizedReason]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}

/// A class which mocks [EncryptionKeyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEncryptionKeyService extends _i1.Mock
    implements _i4.EncryptionKeyService {
  MockEncryptionKeyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> generateAndStoreNewKey() =>
      (super.noSuchMethod(
            Invocation.method(#generateAndStoreNewKey, []),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#generateAndStoreNewKey, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<String?> getDatabaseKey() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabaseKey, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<bool> hasStoredKey() =>
      (super.noSuchMethod(
            Invocation.method(#hasStoredKey, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> deleteDatabaseKey() =>
      (super.noSuchMethod(
            Invocation.method(#deleteDatabaseKey, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
